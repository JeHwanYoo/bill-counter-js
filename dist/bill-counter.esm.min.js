/*! For license information please see bill-counter.esm.min.js.LICENSE */
var BillCounter=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e),n.d(e,"$B",(function(){return r}));const r={localeOptions:{format:!0,locale:"en-US",currency:"USD"},countFast(t,e,n=100){const r=document.getElementById(t),o=parseInt(r.innerText.replace(/\D+/g,"")),a=e>o,u=Math.abs(e-o),c=a?u/n:-u/n;let i=o;const s=setInterval(()=>{i+=c,a&&i>e?(r.innerText=l(e.toString()),clearInterval(s)):!a&&i<e?(r.innerText=l(e.toString()),clearInterval(s)):r.innerText=l(Math.round(i).toString())},1)},countByN(t,e,n,r=.1){const o=document.getElementById(t),a=parseInt(o.innerText.replace(/\D+/g,"")),u=e>a,c=u?n:-n;let i=a;const s=setInterval(()=>{i+=c,u&&i>e?(o.innerText=l(e.toString()),clearInterval(s)):!u&&i<e?(o.innerText=l(e.toString()),clearInterval(s)):o.innerText=l(i.toString())},r)},countObjectByN(t,e,n,r=.1){const o=t.value,a=e>o,u=a?n:-n;let c=o;const i=setInterval(()=>{c+=u,a&&c>e?(t.value=l(e.toString()),clearInterval(i)):!a&&c<e?(t.value=l(e.toString()),clearInterval(i)):t.value=l(c.toString())},r)},countObjectFast(t,e,n=100){const r=t.value,o=e>r,a=Math.abs(e-r),u=o?a/n:-a/n;let c=r;const i=setInterval(()=>{c+=u,o&&c>e?(t.value=l(e.toString()),clearInterval(i)):!o&&c<e?(t.value=l(e.toString()),clearInterval(i)):t.value=l(Math.round(c).toString())},1)},formatStyler:o,defaultFormatStyler:o};function o(t){return new Intl.NumberFormat(r.localeOptions.locale,{style:"currency",currency:r.localeOptions.currency,minimumFractionDigits:0}).format(parseInt(t))}function l(t){return r.localeOptions.format?r.formatStyler(t):t}}]);const _BillCounter$$B=BillCounter.$B;export{_BillCounter$$B as $B};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,